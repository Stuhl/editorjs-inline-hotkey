{"mappings":"A,S,0B,C,E,O,c,C,E,a,C,M,C,E,a,C,C,E,C,S,e,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,Q,c,0B,O,O,E,e,O,O,C,U,I,yCCEA,OAAM,2CAMJ,WAAW,UAAW,CACpB,MAAO,CAAA,CACT,CAEA,WAAW,UAAW,CACpB,MAAO,cACT,CAEA,WAAW,UAAW,CACpB,MAAO,CACL,IAAK,CAAA,CACP,CACF,CAEA,WAAW,KAAM,CACf,MAAO,wBACT,C,M,CAEO,IAAA,CAAA,KAAA,CAAgB,Q,C,AAEvB,YAAY,CAAA,IAAE,CAAG,CAAE,CAAE,CACnB,IAAI,CAAC,GAAG,CAAW,EACnB,IAAI,CAAC,MAAM,CAAQ,KACnB,IAAI,CAAC,KAAK,CAAS,CAAA,EACnB,IAAI,CAAC,WAAW,CAAG,SAAS,aAAa,CAAC,MAC5C,CAEA,aAAsB,CACpB,MAAO,CAAC;A;A;A;A;AAKZ,CAAC,AACC,CAEA,QAAS,CAMP,OALA,IAAI,CAAC,MAAM,CAAa,SAAS,aAAa,CAAC,UAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAQ,SACxB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAG,IAAI,CAAC,WAAW,GACxC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,EAEnD,IAAI,CAAC,MAAM,AACpB,CAEA,SAAS,CAAY,CAAE,CACrB,GAAK,GAIL,GAAI,IAAI,CAAC,KAAK,CAAE,CACd,IAAI,CAAC,MAAM,CAAC,GACZ,MACF,CAEA,IAAI,CAAC,IAAI,CAAC,GACZ,CAEA,KAAK,CAAY,CAAE,CACjB,IAAM,EAAe,EAAM,eAAe,GACpC,EAAe,SAAS,aAAa,CAAC,OAE5C,EAAI,SAAS,CAAC,GAAG,CAAC,2CAAqB,GAAG,EAE1C,EAAI,WAAW,CAAC,GAChB,EAAM,UAAU,CAAC,GAEjB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,WAAW,CAAC,EACjC,CAEA,OAAO,CAAY,CAAE,CACnB,IAAM,EAAe,EAAM,eAAe,GACpC,EAAe,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,MAAO,2CAAqB,GAAG,EAEjF,IACF,EAAY,MAAM,GAClB,EAAM,UAAU,CAAC,GAErB,CAEA,WAAW,CAAoB,CAAE,CAC/B,IAAM,EAAM,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,MAAO,2CAAqB,GAAG,EAQ5E,OANA,IAAI,CAAC,KAAK,CAAG,CAAC,CAAC,EAEX,IAAI,CAAC,MAAM,EACb,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,sBAAsB,CAAE,IAAI,CAAC,KAAK,EAG1E,IAAI,CAAC,KAAK,AACnB,CACF,CAEA,IAAA,yCAAe","sources":["<anon>","src/index.ts"],"sourcesContent":["require(\"./main.css\");\n\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $eb7869949b641a40$export$2e2bcd8739ae039);\n\nclass $eb7869949b641a40$var$EditorJSInlineHotkey {\n    static get isInline() {\n        return true;\n    }\n    static get shortcut() {\n        return \"Ctrl+Shift+k\";\n    }\n    static get sanitize() {\n        return {\n            kbd: true\n        };\n    }\n    static get CSS() {\n        return \"editorjs-inline-hotkey\";\n    }\n    static{\n        this.title = \"Hotkey\";\n    }\n    constructor({ api: api }){\n        this.api = api;\n        this.button = null;\n        this.state = false;\n        this.keyboardTag = document.createElement(\"KBD\");\n    }\n    getToolIcon() {\n        return `<svg class=\"w-6 h-6 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\">\n  <path stroke=\"currentColor\" stroke-linecap=\"square\" stroke-width=\"2\" d=\"M8 15h7.01v.01H15L8 15Z\"/>\n  <path stroke=\"currentColor\" stroke-linecap=\"square\" stroke-width=\"2\" d=\"M20 6H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Z\"/>\n  <path stroke=\"currentColor\" stroke-linecap=\"square\" stroke-width=\"2\" d=\"M6 9h.01v.01H6V9Zm0 3h.01v.01H6V12Zm0 3h.01v.01H6V15Zm3-6h.01v.01H9V9Zm0 3h.01v.01H9V12Zm3-3h.01v.01H12V9Zm0 3h.01v.01H12V12Zm3 0h.01v.01H15V12Zm3 0h.01v.01H18V12Zm0 3h.01v.01H18V15Zm-3-6h.01v.01H15V9Zm3 0h.01v.01H18V9Z\"/>\n</svg>\n`;\n    }\n    render() {\n        this.button = document.createElement(\"BUTTON\");\n        this.button.type = \"button\";\n        this.button.innerHTML = this.getToolIcon();\n        this.button.classList.add(this.api.styles.inlineToolButton);\n        return this.button;\n    }\n    surround(range) {\n        if (!range) return;\n        if (this.state) {\n            this.unwrap(range);\n            return;\n        }\n        this.wrap(range);\n    }\n    wrap(range) {\n        const selectedText = range.extractContents();\n        const kbd = document.createElement(\"KBD\");\n        kbd.classList.add($eb7869949b641a40$var$EditorJSInlineHotkey.CSS);\n        kbd.appendChild(selectedText);\n        range.insertNode(kbd);\n        this.api.selection.expandToTag(kbd);\n    }\n    unwrap(range) {\n        const selectedText = range.extractContents();\n        const keyboardTag = this.api.selection.findParentTag(\"KBD\", $eb7869949b641a40$var$EditorJSInlineHotkey.CSS);\n        if (keyboardTag) {\n            keyboardTag.remove();\n            range.insertNode(selectedText);\n        }\n    }\n    checkState(selection) {\n        const tag = this.api.selection.findParentTag(\"KBD\", $eb7869949b641a40$var$EditorJSInlineHotkey.CSS);\n        this.state = !!tag;\n        if (this.button) this.button.classList.toggle(this.api.styles.inlineToolButtonActive, this.state);\n        return this.state;\n    }\n}\nvar $eb7869949b641a40$export$2e2bcd8739ae039 = $eb7869949b641a40$var$EditorJSInlineHotkey;\n\n\n//# sourceMappingURL=main.js.map\n","import \"./style.css\"\r\n\r\nclass EditorJSInlineHotkey {\r\n  api        : any\r\n  button     : HTMLButtonElement | null\r\n  state      : boolean\r\n  keyboardTag: HTMLElement\r\n\r\n  static get isInline() {\r\n    return true\r\n  }\r\n\r\n  static get shortcut() {\r\n    return \"Ctrl+Shift+k\"\r\n  }\r\n\r\n  static get sanitize() {\r\n    return {\r\n      kbd: true\r\n    }\r\n  }\r\n\r\n  static get CSS() {\r\n    return \"editorjs-inline-hotkey\"\r\n  }\r\n\r\n  static title: string = \"Hotkey\"\r\n\r\n  constructor({ api }) {\r\n    this.api         = api\r\n    this.button      = null\r\n    this.state       = false\r\n    this.keyboardTag = document.createElement(\"KBD\")\r\n  }\r\n\r\n  getToolIcon(): string {\r\n    return `<svg class=\"w-6 h-6 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n  <path stroke=\"currentColor\" stroke-linecap=\"square\" stroke-width=\"2\" d=\"M8 15h7.01v.01H15L8 15Z\"/>\r\n  <path stroke=\"currentColor\" stroke-linecap=\"square\" stroke-width=\"2\" d=\"M20 6H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Z\"/>\r\n  <path stroke=\"currentColor\" stroke-linecap=\"square\" stroke-width=\"2\" d=\"M6 9h.01v.01H6V9Zm0 3h.01v.01H6V12Zm0 3h.01v.01H6V15Zm3-6h.01v.01H9V9Zm0 3h.01v.01H9V12Zm3-3h.01v.01H12V9Zm0 3h.01v.01H12V12Zm3 0h.01v.01H15V12Zm3 0h.01v.01H18V12Zm0 3h.01v.01H18V15Zm-3-6h.01v.01H15V9Zm3 0h.01v.01H18V9Z\"/>\r\n</svg>\r\n`\r\n  }\r\n\r\n  render() {\r\n    this.button           = document.createElement(\"BUTTON\") as HTMLButtonElement\r\n    this.button.type      = \"button\"\r\n    this.button.innerHTML = this.getToolIcon()\r\n    this.button.classList.add(this.api.styles.inlineToolButton)\r\n\r\n    return this.button\r\n  }\r\n\r\n  surround(range: Range) {\r\n    if (!range) {\r\n      return\r\n    }\r\n\r\n    if (this.state) {\r\n      this.unwrap(range)\r\n      return\r\n    }\r\n\r\n    this.wrap(range)\r\n  }\r\n\r\n  wrap(range: Range) {\r\n    const selectedText = range.extractContents()\r\n    const kbd          = document.createElement(\"KBD\")\r\n\r\n    kbd.classList.add(EditorJSInlineHotkey.CSS)\r\n\r\n    kbd.appendChild(selectedText)\r\n    range.insertNode(kbd)\r\n\r\n    this.api.selection.expandToTag(kbd)\r\n  }\r\n\r\n  unwrap(range: Range) {\r\n    const selectedText = range.extractContents()\r\n    const keyboardTag  = this.api.selection.findParentTag(\"KBD\", EditorJSInlineHotkey.CSS)\r\n\r\n    if (keyboardTag) {\r\n      keyboardTag.remove()\r\n      range.insertNode(selectedText)\r\n    }\r\n  }\r\n\r\n  checkState(selection: Selection) {\r\n    const tag = this.api.selection.findParentTag(\"KBD\", EditorJSInlineHotkey.CSS)\r\n\r\n    this.state = !!tag\r\n\r\n    if (this.button) {\r\n      this.button.classList.toggle(this.api.styles.inlineToolButtonActive, this.state)\r\n    }\r\n\r\n    return this.state\r\n  }\r\n}\r\n\r\nexport default EditorJSInlineHotkey"],"names":["$parcel$defineInteropFlag","a","Object","defineProperty","value","configurable","$parcel$export","e","n","v","s","get","set","enumerable","require","module","exports","$eb7869949b641a40$export$2e2bcd8739ae039","$eb7869949b641a40$var$EditorJSInlineHotkey","isInline","shortcut","sanitize","kbd","CSS","title","constructor","api","button","state","keyboardTag","document","createElement","getToolIcon","render","type","innerHTML","classList","add","styles","inlineToolButton","surround","range","unwrap","wrap","selectedText","extractContents","appendChild","insertNode","selection","expandToTag","findParentTag","remove","checkState","tag","toggle","inlineToolButtonActive"],"version":3,"file":"main.js.map"}