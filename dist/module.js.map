{"mappings":"AAAA,MAAM;IAKJ,WAAW,WAAW;QACpB,OAAO;IACT;IAEA,WAAW,WAAW;QACpB,OAAO;IACT;IAEA,WAAW,WAAW;QACpB,OAAO;YACL,KAAK;QACP;IACF;IAEA,WAAW,MAAM;QACf,OAAO;IACT;;aAEO,QAAgB;;IAEvB,aAAa,GAAgB,EAAE;QAC7B,IAAI,KAAK,CAAC,OAAO,GAAQ;QACzB,IAAI,KAAK,CAAC,KAAK,GAAU;QACzB,IAAI,KAAK,CAAC,UAAU,GAAK;QACzB,IAAI,KAAK,CAAC,YAAY,GAAG;QACzB,IAAI,KAAK,CAAC,QAAQ,GAAO;QACzB,IAAI,KAAK,CAAC,MAAM,GAAS;QACzB,IAAI,KAAK,CAAC,SAAS,GAAM;IAC3B;IAEA,YAAY,OAAE,GAAG,EAAE,CAAE;QACnB,IAAI,CAAC,GAAG,GAAM;QACd,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,KAAK,GAAI;IAChB;IAEA,cAAsB;QACpB,OAAO,CAAC;;;;;AAKZ,CAAC;IACC;IAEA,SAAS;QACP,IAAI,CAAC,MAAM,GAAa,SAAS,aAAa,CAAC;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,GAAQ;QACxB,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW;QACxC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB;QAE1D,OAAO,IAAI,CAAC,MAAM;IACpB;IAEA,SAAS,KAAY,EAAE;QACrB,IAAI,CAAC,OACH;QAGF,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,CAAC,MAAM,CAAC;YACZ;QACF;QAEA,IAAI,CAAC,IAAI,CAAC;IACZ;IAEA,KAAK,KAAY,EAAE;QACjB,MAAM,eAAe,MAAM,eAAe;QAC1C,MAAM,MAAe,SAAS,aAAa,CAAC;QAE5C,IAAI,SAAS,CAAC,GAAG,CAAC,2CAAqB,GAAG;QAC1C,IAAI,CAAC,YAAY,CAAC;QAElB,IAAI,WAAW,CAAC;QAChB,MAAM,UAAU,CAAC;QAEjB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,WAAW,CAAC;IACjC;IAEA,OAAO,KAAY,EAAE;QACnB,MAAM,eAAe,MAAM,eAAe;QAC1C,MAAM,cAAe,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,OAAO,2CAAqB,GAAG;QAErF,IAAI,aAAa;YACf,YAAY,MAAM;YAClB,MAAM,UAAU,CAAC;QACnB;IACF;IAEA,WAAW,SAAoB,EAAE;QAC/B,MAAM,MAAM,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,OAAO,2CAAqB,GAAG;QAE5E,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAEf,IAAI,IAAI,CAAC,MAAM,EACb,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,sBAAsB,EAAE,IAAI,CAAC,KAAK;QAGjF,OAAO,IAAI,CAAC,KAAK;IACnB;AACF;IAEA,2CAAe","sources":["src/index.ts"],"sourcesContent":["class EditorJSInlineHotkey {\r\n  api        : any\r\n  button     : HTMLButtonElement | null\r\n  state      : boolean\r\n\r\n  static get isInline() {\r\n    return true\r\n  }\r\n\r\n  static get shortcut() {\r\n    return \"Ctrl+Shift+k\"\r\n  }\r\n\r\n  static get sanitize() {\r\n    return {\r\n      kbd: true\r\n    }\r\n  }\r\n\r\n  static get CSS() {\r\n    return \"editorjs-inline-hotkey\"\r\n  }\r\n\r\n  static title: string = \"Hotkey\"\r\n  \r\n  addInlineCSS(kbd: HTMLElement) {\r\n    kbd.style.padding      = \"4px\"\r\n    kbd.style.color        = \"hsla(0, 0%, 20%, 1)\"\r\n    kbd.style.fontWeight   = \"600\"\r\n    kbd.style.borderRadius = \"4px\"\r\n    kbd.style.fontSize     = \"12px\"\r\n    kbd.style.border       = \"1px solid hsla(0, 0%, 80%, 1)\"\r\n    kbd.style.boxShadow    = \"0px 1px 0px hsla(0, 0%, 80%, 1)\"\r\n  }\r\n\r\n  constructor({ api }) {\r\n    this.api    = api\r\n    this.button = null\r\n    this.state  = false\r\n  }\r\n\r\n  getToolIcon(): string {\r\n    return `<svg class=\"w-6 h-6 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n  <path stroke=\"currentColor\" stroke-linecap=\"square\" stroke-width=\"2\" d=\"M8 15h7.01v.01H15L8 15Z\"/>\r\n  <path stroke=\"currentColor\" stroke-linecap=\"square\" stroke-width=\"2\" d=\"M20 6H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Z\"/>\r\n  <path stroke=\"currentColor\" stroke-linecap=\"square\" stroke-width=\"2\" d=\"M6 9h.01v.01H6V9Zm0 3h.01v.01H6V12Zm0 3h.01v.01H6V15Zm3-6h.01v.01H9V9Zm0 3h.01v.01H9V12Zm3-3h.01v.01H12V9Zm0 3h.01v.01H12V12Zm3 0h.01v.01H15V12Zm3 0h.01v.01H18V12Zm0 3h.01v.01H18V15Zm-3-6h.01v.01H15V9Zm3 0h.01v.01H18V9Z\"/>\r\n</svg>\r\n`\r\n  }\r\n\r\n  render() {\r\n    this.button           = document.createElement(\"BUTTON\") as HTMLButtonElement\r\n    this.button.type      = \"button\"\r\n    this.button.innerHTML = this.getToolIcon()\r\n    this.button.classList.add(this.api.styles.inlineToolButton)\r\n\r\n    return this.button\r\n  }\r\n\r\n  surround(range: Range) {\r\n    if (!range) {\r\n      return\r\n    }\r\n\r\n    if (this.state) {\r\n      this.unwrap(range)\r\n      return\r\n    }\r\n\r\n    this.wrap(range)\r\n  }\r\n\r\n  wrap(range: Range) {\r\n    const selectedText = range.extractContents()\r\n    const kbd          = document.createElement(\"KBD\")\r\n\r\n    kbd.classList.add(EditorJSInlineHotkey.CSS)\r\n    this.addInlineCSS(kbd)\r\n\r\n    kbd.appendChild(selectedText)\r\n    range.insertNode(kbd)\r\n\r\n    this.api.selection.expandToTag(kbd)\r\n  }\r\n\r\n  unwrap(range: Range) {\r\n    const selectedText = range.extractContents()\r\n    const keyboardTag  = this.api.selection.findParentTag(\"KBD\", EditorJSInlineHotkey.CSS)\r\n\r\n    if (keyboardTag) {\r\n      keyboardTag.remove()\r\n      range.insertNode(selectedText)\r\n    }\r\n  }\r\n\r\n  checkState(selection: Selection) {\r\n    const tag = this.api.selection.findParentTag(\"KBD\", EditorJSInlineHotkey.CSS)\r\n\r\n    this.state = !!tag\r\n\r\n    if (this.button) {\r\n      this.button.classList.toggle(this.api.styles.inlineToolButtonActive, this.state)\r\n    }\r\n\r\n    return this.state\r\n  }\r\n}\r\n\r\nexport default EditorJSInlineHotkey"],"names":[],"version":3,"file":"module.js.map"}